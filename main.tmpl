package main

import (
	app "{{.PackPath}}"
	"bytes"
	"encoding/gob"
	"encoding/json"
	"flag"
	"fmt"
	"github.com/lengzhao/govm/counter"
	"github.com/lengzhao/govm/database"
	"io/ioutil"
	"log"
	sysr "runtime"
	"runtime/debug"
)

// TAppRPC rpc接口的对象定义
type TAppRPC struct{}

// TRunParam Run接口的入参
type TRunParam struct {
	Chain     uint64 `json:"chain,omitempty"`
	Flag      []byte `json:"flag,omitempty"`
	User      []byte `json:"user,omitempty"`
	Data      []byte `json:"data,omitempty"`
	Cost      uint64 `json:"cost,omitempty"`
	Energy    uint64 `json:"energy,omitempty"`
	CheckSum  byte   `json:"check_sum,omitempty"`
	ErrorInfo string `json:"error_info,omitempty"`
}

func main() {
	args := TRunParam{}
	log.SetFlags(log.Lshortfile | log.LstdFlags)
	log.Println("[app]start. {{.PackPath}}")
	fn := flag.String("file", "", "data file,if empty,read data from database(json)")
	mode := flag.String("mode", "", "enable set 'test' mode,it will not write data to database")
	flag.Parse()
	var paramKey []byte
	if *mode == "" {
		paramKey = []byte("{{.AppName}}")
	} else {
		paramKey = []byte("test")
	}
	defer func() {
		e := recover()
		if e != nil {
			log.Println("fail to run app:{{.PackPath}} ", e)
			log.Println(string(debug.Stack()))
			args.ErrorInfo = fmt.Sprintf("error message:%s", e)
			args.Data = nil
		}
		if *fn != "" {
			log.Printf("result:%x\n", args.ErrorInfo)
			return
		}
		var buf bytes.Buffer
		enc := gob.NewEncoder(&buf)
		enc.Encode(args)
		database.Set({{.ChainID}}, []byte("app_run"), paramKey, buf.Bytes())
	}()
	var d []byte
	var err error
	if *fn != "" {
		d, err = ioutil.ReadFile(*fn)
		if err != nil {
			log.Println("fail to read data from", *fn)
			return
		}
		err = json.Unmarshal(d, &args)
		if err != nil {
			log.Println("fail to Unmarshal parament from", *fn, err)
			return
		}
	} else {
		d = database.Get({{.ChainID}}, []byte("app_run"), paramKey)
		if len(d) == 0 {
			log.Println("[db]fail to get data.")
			panic("retry")
		}
		rst := bytes.NewBuffer(d)
		dec := gob.NewDecoder(rst)
		err = dec.Decode(&args)
		if err != nil {
			log.Println("decode error:", err)
			panic("retry")
		}
	}

	if len(args.User) == 0 {
		log.Printf("fail to get parament,%x", d)
		panic("retry")
	}
	counter.SetEnergy(args.Energy)
	app.GoVMRun(args.User, args.Data, args.Cost)

	mem := sysr.MemStats{}
	sysr.ReadMemStats(&mem)

	var memLimit uint64 = 4 * 1024 * 1024 * 1024
	if *mode != "" {
		memLimit = 3 * 1024 * 1024 * 1024
	}
	if mem.TotalAlloc > memLimit {
		panic(fmt.Sprintf("used too much memory:%d, over 4G", mem.TotalAlloc))
	}
	args.ErrorInfo = "ok"
}
