package main

import (
	app "{{.PackPath}}"
	"bytes"
	"encoding/gob"
	"encoding/hex"
	"flag"
	"fmt"
	"github.com/govm-net/govm/counter"
	"github.com/lengzhao/database/client"
	"log"
	sysr "runtime"
	"runtime/debug"
)

// TAppRPC rpc接口的对象定义
type TAppRPC struct{}

// TRunParam Run接口的入参
type TRunParam struct {
	Chain    uint64 `json:"chain,omitempty"`
	Flag     []byte `json:"flag,omitempty"`
	User     []byte `json:"user,omitempty"`
	Data     []byte `json:"data,omitempty"`
	Cost     uint64 `json:"cost,omitempty"`
	Energy   uint64 `json:"energy,omitempty"`
	CheckSum byte   `json:"check_sum,omitempty"`
}

const (
	tbOfRunParam  = "app_run"
	tbOfRunResult = "app_result"
)

func main() {
	args := TRunParam{}
	log.SetFlags(log.Lshortfile | log.LstdFlags)
	log.Println("[app]start. {{.PackPath}}")
	var addrType, address, tx, mode, dbFlag string
	flag.StringVar(&addrType, "at", "tcp", "address type of db server")
	flag.StringVar(&address, "addr", "127.0.0.1:17777", "address of db server")
	flag.StringVar(&tx, "tx", "", "transaction hash")
	flag.StringVar(&mode, "m", "", "check mode")
	flag.StringVar(&dbFlag, "f", "", "db flag(block key)")
	flag.Parse()
	log.Println("params:", addrType, address, tx, mode, dbFlag)
	paramKey, err := hex.DecodeString(tx)
	if err != nil || len(paramKey) == 0 {
		log.Panic("error tx.", tx, err)
	}
	dbc := client.New(addrType, address, 1)

	defer func() {
		e := recover()
		var rst = "success"
		if e != nil {
			log.Println("fail to run app:{{.PackPath}} ", e)
			log.Println(string(debug.Stack()))
			rst = fmt.Sprintf("error message:%s", e)
		}
		dbc.Set({{.ChainID}}, []byte(tbOfRunResult), paramKey, []byte(rst))
		dbc.Close()
	}()
	var d []byte
	d = dbc.Get({{.ChainID}}, []byte(tbOfRunParam), paramKey)
	if len(d) == 0 {
		log.Panic("[db]fail to get data.")
	}
	rst := bytes.NewBuffer(d)
	dec := gob.NewDecoder(rst)
	err = dec.Decode(&args)
	if err != nil {
		log.Panic("fail to decode param:", err)
	}

	if len(args.User) == 0 {
		log.Panic("empty user")
	}
	counter.SetEnergy(args.Energy)
	app.GoVMRun(args.User, args.Data, args.Cost)

	mem := sysr.MemStats{}
	sysr.ReadMemStats(&mem)

	var memLimit uint64 = 4 * 1024 * 1024 * 1024
	if mode != "" {
		memLimit = 3 * 1024 * 1024 * 1024
	}
	if mem.TotalAlloc > memLimit {
		log.Panicf("used too much memory:%d, over 4G", mem.TotalAlloc)
	}
}
